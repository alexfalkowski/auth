syntax = "proto3";

package auth.v1;

import "google/api/annotations.proto";

option go_package = "github.com/alexfalkowski/auth/api/auth/v1";
option ruby_package = "Auth::V1";

// GeneratePasswordRequest with length.
message GeneratePasswordRequest {
  uint32 length = 1;
}

// GeneratePasswordResponse with meta and password.
message GeneratePasswordResponse {
  map<string, string> meta = 1;
  Password password = 2;
}

// Password with plain and hash.
message Password {
  string plain = 1;
  string hash = 2;
}

// GenerateKeyRequest with kind.
message GenerateKeyRequest {
  string kind = 1;
}

// GenerateKeyResponse with meta and key.
message GenerateKeyResponse {
  map<string, string> meta = 1;
  Key key = 2;
}

// Key with public and private.
message Key {
  string public = 1;
  string private = 2;
}

// GetPublicKeyRequest with kind.
message GetPublicKeyRequest {
  string kind = 1;
}

// GetPublicKeyResponse with meta and key.
message GetPublicKeyResponse {
  map<string, string> meta = 1;
  string key = 2;
}

// GenerateAccessTokenRequest with length.
message GenerateAccessTokenRequest {
  uint32 length = 1;
}

// GenerateAccessTokenResponse with meta and token.
message GenerateAccessTokenResponse {
  map<string, string> meta = 1;
  AccessToken token = 2;
}

// AccessToken with bearer and password.
message AccessToken {
  string bearer = 1;
  Password password = 2;
}

// GenerateServiceTokenRequest with kind and audience.
message GenerateServiceTokenRequest {
  string kind = 1;
  string audience = 2;
}

// GenerateServiceTokenResponse with meta and token.
message GenerateServiceTokenResponse {
  map<string, string> meta = 1;
  ServiceToken token = 2;
}

// ServiceToken with bearer.
message ServiceToken {
  string bearer = 1;
}

// VerifyServiceTokenRequest with kind, audience and action.
message VerifyServiceTokenRequest {
  string kind = 1;
  string audience = 2;
  string action = 3;
}

// GenerateServiceTokenResponse with meta.
message VerifyServiceTokenResponse {
  map<string, string> meta = 1;
}

// Service for auth.
service Service {
  // GeneratePassword that is secure.
  rpc GeneratePassword(GeneratePasswordRequest) returns (GeneratePasswordResponse) {
    option (google.api.http) = {
      post: "/v1/password/generate"
      body: "*"
    };
  }

  // GenerateKey public and private key based on kind.
  rpc GenerateKey(GenerateKeyRequest) returns (GenerateKeyResponse) {
    option (google.api.http) = {
      post: "/v1/key/generate"
      body: "*"
    };
  }

  // GetPublicKey from kind.
  rpc GetPublicKey(GetPublicKeyRequest) returns (GetPublicKeyResponse) {
    option (google.api.http) = {get: "/v1/key/public/{kind}"};
  }

  // GenerateAccessToken from RSA keys.
  rpc GenerateAccessToken(GenerateAccessTokenRequest) returns (GenerateAccessTokenResponse) {
    option (google.api.http) = {
      post: "/v1/access-token/generate"
      body: "*"
    };
  }

  // GenerateServiceToken from Ed25519 keys.
  rpc GenerateServiceToken(GenerateServiceTokenRequest) returns (GenerateServiceTokenResponse) {
    option (google.api.http) = {
      post: "/v1/service-token/generate"
      body: "*"
    };
  }

  // VerifyServiceToken based on kind.
  rpc VerifyServiceToken(VerifyServiceTokenRequest) returns (VerifyServiceTokenResponse) {
    option (google.api.http) = {get: "/v1/service-token/verify/{kind}/{audience}/{action}"};
  }
}
