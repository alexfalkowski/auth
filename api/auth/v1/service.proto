syntax = "proto3";

package auth.v1;

import "google/api/annotations.proto";

option go_package = "github.com/alexfalkowski/auth/api/auth/v1";
option ruby_package = "Auth::V1";

// GeneratePasswordRequest with meta.
message GeneratePasswordRequest {
  map<string, string> meta = 1;
}

// GeneratePasswordResponse with meta and password.
message GeneratePasswordResponse {
  map<string, string> meta = 1;
  Password password = 2;
}

// Password with plain and hash.
message Password {
  string plain = 1;
  string hash = 2;
}

// GenerateKeyRequest with meta.
message GenerateKeyRequest {
  map<string, string> meta = 1;
}

// GenerateKeyResponse with meta and key.
message GenerateKeyResponse {
  map<string, string> meta = 1;
  Key key = 2;
}

// Key with public and private.
message Key {
  string public = 1;
  string private = 2;
}

// GenerateAccessTokenRequest with meta.
message GenerateAccessTokenRequest {
  map<string, string> meta = 1;
}

// GenerateAccessTokenResponse with meta and token.
message GenerateAccessTokenResponse {
  map<string, string> meta = 1;
  AccessToken token = 2;
}

// AccessToken with bearer and password.
message AccessToken {
  string bearer = 1;
  Password password = 2;
}

// Service for auth.
service Service {
  // GeneratePassword from meta.
  rpc GeneratePassword(GeneratePasswordRequest) returns (GeneratePasswordResponse) {
    option (google.api.http) = {post: "/v1/password/generate"};
  }

  // GeneratePassword from meta.
  rpc GenerateKey(GenerateKeyRequest) returns (GenerateKeyResponse) {
    option (google.api.http) = {post: "/v1/key/generate"};
  }

  // GenerateAccessToken from meta.
  rpc GenerateAccessToken(GenerateAccessTokenRequest) returns (GenerateAccessTokenResponse) {
    option (google.api.http) = {post: "/v1/access-token/generate"};
  }
}
